(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{319:function(n,a,r){"use strict";r.r(a);var t=r(2),e=Object(t.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h3",{attrs:{id:"显示强制类型转换"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#显示强制类型转换"}},[this._v("#")]),this._v(" 显示强制类型转换")]),this._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[this._v('var a = 42;\nvar b = String( a );\nvar c = "3.14";\nvar d = Number( c );\n\n\nvar a = 42;\nvar b = a.toString();\nvar c = "3.14";\nvar d = +c;\t\t\t//一元运算符 + 会将操作数显式强制类型转换为数字\n\nvar a = "0";\nvar b = [];\nvar c = {};\nvar d = "";\nvar e = 0;\nvar f = null;\nvar g;\nBoolean( a ); // true\nBoolean( b ); // true\nBoolean( c ); // true\nBoolean( d ); // false\nBoolean( e ); // false\nBoolean( f ); // false\nBoolean( g ); // false\n\nvar a = "0";\nvar b = [];\nvar c = {};\nvar d = "";\nvar e = 0;\nvar f = null;\nvar g;\n!!a; // true\n!!b; // true\n!!c; // true\n!!d; // false\n!!e; // false\n!!f; // false\n!!g; // false   一元运算符 ! 显式地将值强制类型转换为布尔值。但是它同时还将真值反转为假值（或者将假值反转\n\t\t\t\t为真值）。所以显式强制类型转换为布尔值最常用的方法是 !! ，因为第二个 ! 会将结果反转回原值\n')])])])])}),[],!1,null,null,null);a.default=e.exports}}]);