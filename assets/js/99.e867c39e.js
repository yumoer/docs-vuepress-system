(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{321:function(t,n,e){"use strict";e.r(n);var a=e(2),s=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h3",{attrs:{id:"比较符在js中的规则-趋于数字化-不同数据类型之间的比较-排除掉obj与obj"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#比较符在js中的规则-趋于数字化-不同数据类型之间的比较-排除掉obj与obj"}},[t._v("#")]),t._v(" ==比较符在js中的规则：趋于数字化(不同数据类型之间的比较，排除掉obj与obj)")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("obj与obj之间的== 只比较栈中保存的地址值\n")])])]),n("h3",{attrs:{id:"操作符解析1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#操作符解析1"}},[t._v("#")]),t._v(" ==操作符解析①")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("首先把javascript中的数据类型分成两组：\n\t1.\tString、Number、Boolean和Object(有)\n\t2.\tUndefined和Null(无)\n\t\n\t3.\t1与2之间的比较都为false \n\t4.\tUndefined和Null之间的比较为true\n\t5.  NaN 不等于 NaN\n\t\nnull和undefined不得不说的故事(设计者原本的意图)\n\t\t假如你打算把一个变量赋予对象类型的值，但是现在还没有赋值，\n\t那么你可以用null(关键字)表示此时的状态(证据之一就是typeof null 的结果是'object')；\n\t\t相反，假如你打算把一个变量赋予原始类型的值，但是现在还没有赋值，\n\t那么你可以用undefined（标识符）表示此时的状态。\n\n统统往数字转！！！\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);