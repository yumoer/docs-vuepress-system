(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{282:function(t,a,n){"use strict";n.r(a);var s=n(2),e=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"canvas基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canvas基本用法"}},[t._v("#")]),t._v(" canvas基本用法")]),t._v(" "),a("h3",{attrs:{id:"什么是canvas-画布"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是canvas-画布"}},[t._v("#")]),t._v(" 什么是canvas（画布）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("<canvas>是HTML5新增的元素，可用于通过使用javascript中的脚本来绘制图形，创建动画\n\n可以使用<canvas>时，建议要成对出现，不要使用闭合的形式\n\tcanvas元素默认具有高宽\n\t\twidth：300px；\n\t\theight：150px；\n")])])]),a("h3",{attrs:{id:"替代内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#替代内容"}},[t._v("#")]),t._v(" 替代内容")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("<canvas>很容易定义一些替代内容，只需要在<canvas>标签中提供替换内容就可以\n\t支持<canvas>的浏览器将会忽略在容器中包含的内容，并且只是正常渲染canvas\n\t不支持<canvas>的浏览器会显示代替内容\t\n")])])]),a("h3",{attrs:{id:"canvas标签的两个属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canvas标签的两个属性"}},[t._v("#")]),t._v(" canvas标签的两个属性")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("<canvas>标签只有两个属性 - width和height\t\n\t当没有设置宽度和高度的时候，canvas会初始化宽度为300px和高度为150px的矩形\n\n画布的高宽\n\thtml属性设置width height时，只会影响画布本身不影响画布内容\n\tcss属性设置width和height时不但会影响画布本身的高宽，还会使画布中的内容等比例缩放（缩放参照于画布默认的尺寸）\n")])])]),a("h3",{attrs:{id:"渲染上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染上下文"}},[t._v("#")]),t._v(" 渲染上下文")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("<canvas>元素有一个叫做getContext()的方法，这个方法是用来获得渲染上下文和它的绘画功能。\ngetContext()只有一个参数，上下文的格式\n\t获取方式\n\t\t获取画布\n\t\t\tvar canvas = document.querySelector(\"box\");（querySelector身上有坑）\n\t\t获取画笔\n\t\t\tvar ctx = canvas.getContext(\"2d\");\n\t检查支持性\n\t\tvar canvas = document.getElementById('tutorial');\n\t\t  if (canvas.getContext){\n\t\t\t\tvar ctx = canvas.getContext('2d');\n\t\t\t} \n")])])]),a("h2",{attrs:{id:"canvas绘制矩形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canvas绘制矩形"}},[t._v("#")]),t._v(" canvas绘制矩形")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("HTML中的元素canvas只支持一种原生的图形绘制：矩形。所以其他的图形的绘制至少需要生成一条路径\n1.绘制矩形\ncanvas提供三种方法绘制矩形：（画笔属性）\n\t填充的矩形，不加单位（填充色默认为黑色）\n\t\tfillRect（x,y,width,height）\n\t带边框的矩形，小数向上取整（默认边框为一像素实心黑色）\n\t\tstrokeRect（x,y,width,height）\n\t清除指定矩形区域，让清除部分完全透明\n\t\tclearRect（x,y,width,height）\n* x与y指定了在canvas画布上所绘制的矩形的左上角（相对于原点）的坐标\n* width和height设置矩形的尺寸（存在边框的话，边框会在width尚占据一个边框的宽度，height同理）\n2.strokeRect时，边框像素渲染问题\n\t* 按理渲染出的边框应该是1px的\n\t* canvas在渲染矩形边框时，边框宽度是平均分在偏移位置的两侧。\n\t\t* context.strokeRect(10,10,50,5):边框会渲染在10.5和9.5之间，相当于边框会渲染在9到11之间\n\t\t* context：strokeRect（10.5，10.5，50，50）：边框会渲染在10到11之间\n3.添加样式和颜色\n\tfillStyle - 设置图形的填充颜色\n\tstrokeStyle - 设置图形的轮廓颜色（默认为黑色）\n\tlineWidth - 设置当前绘制的粗细，属性值必须为正数（默认1.0）\n\t\t描述线段宽度的数字，0，负数，Infinity和NaN会被忽略\n4.lineWidth & 覆盖渲染\n5.lineJoin\n\t设定线条与线条间接合处的样式（默认是miter）\n\t\t* round：圆角\n\t\t* bevel：斜角\n\t\t* miter：直角\n")])])]),a("h4",{attrs:{id:"高宽问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高宽问题"}},[t._v("#")]),t._v(" 高宽问题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("内联样式时，修改高宽，不会改变\n在css样式时，修改高度，会改变\n")])])]),a("h2",{attrs:{id:"绘制路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制路径"}},[t._v("#")]),t._v(" 绘制路径")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合\n")])])]),a("h3",{attrs:{id:"步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#步骤"}},[t._v("#")]),t._v(" 步骤")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1.首先，需要创建路径起始点\n2.然后你使用画图命令去画出路径\n3.之后你把路径封闭\n4.一旦路径生成，你就能通过描边或填充路径区域来渲染图形\n")])])]),a("h3",{attrs:{id:"绘制三角形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制三角形"}},[t._v("#")]),t._v(" 绘制三角形")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("beginPath() - 清空路径容器\n\t* 新建一条路径，生成之后，图形绘制命令被指向到路径上准备生成路径\n\t* 调用之后，列表清空重置，就可以重新绘制新的图形\nmoveTo（x,y） - 抬起画笔\n\t* 将笔触移到指定的坐标x以及y上\n\t* 当canvas初始化胡总和beginPath（）调用后，你通常会使用moveTo（）函数设置起点\nlineTo（X,Y） - 开始绘制\n\t* 将笔触移动到指定的坐标x以及y上\n\t* 绘制一条从当前位置到指定x以及y位置的直线\nclosePath() - 自动闭合\n\t* 闭合路径之后图形绘制命令又重新指向到上下文中\n\t\t* 闭合路径closePath（），不是必需的。这个方法会通过绘制一条从当前点到开始点的直线来闭合图形\n\t* 如果图形是已经闭合了的，即当前点为开始点，该函数什么也不做\n\t\t* 当你调用fill（）函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath（）函数\n\t* 但是调用stroke（）时不会自动闭合\nstroke()\n\t* 通过线条来绘制图形轮廓\n\t* 不会自动调用closePath（）\nfill() \n\t* 通过填充路径的内容区域生成实心的图形\n\t* 自动调用closePath()\n")])])]),a("h3",{attrs:{id:"绘制矩形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制矩形"}},[t._v("#")]),t._v(" 绘制矩形")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("rect(x,y,width,height)\n\t* 绘制一个左上角坐标为（x,y），宽度为width以及height的矩形\n\t* 当该方法执行的时候，moveTo（）方法自动设置坐标参数（0，0），也就是说，当前笔触自动重置会默认坐标\n")])])]),a("h3",{attrs:{id:"linecap-canvas-2d-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linecap-canvas-2d-api"}},[t._v("#")]),t._v(" lineCap：canvas 2D API")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("指定如何绘制一条线段末端的属性\n\t属性值\n\t\t* butt - 线段末端以方形结束（默认值）\n\t\t* round - 线段末端以圆形结束\n\t\t* square - 线段末端以方形结束，但是增加了一个宽度和线段相同，高度是线段厚度一半的矩形区域\n")])])]),a("h3",{attrs:{id:"save-canvas-2d-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#save-canvas-2d-api"}},[t._v("#")]),t._v(" save（）：canvas 2D API")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("通过将当前状态放入栈中，保存canvas全部状态的方法\n\t保存到栈中的绘制形态有下面部分组成：\n\t\t* 当前的变换矩阵\n\t\t* 当前的剪切区域\n\t\t* 当前的虚线列表\n\t\t\t属性值：\n\t\t\t\t* strokeStyle\n\t\t\t\t* fillStyle\n\t\t\t\t* lineWidth\n\t\t\t\t* lineCap\n\t\t\t\t* lineJoin\n")])])]),a("h3",{attrs:{id:"restore-canvas-2d-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restore-canvas-2d-api"}},[t._v("#")]),t._v(" restore（）：canvas 2D API")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("通过在绘图状态栈中弹出顶端的状态，将canvas恢复到最近的保存状态的方法，如果没有保存状态，此方法不做任何改变\t\n")])])]),a("h3",{attrs:{id:"基本模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本模板"}},[t._v("#")]),t._v(" 基本模板")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("save（）和restore（）成对出现\n\tsave() - 压栈\n\t样式设置\n\tbeginPath()\n\t路径设置\n\trestore() - 出栈\n\n路径容器\n\t每次调用路径API时，都会在路径容器里做登记\n\t调用beginPath时，清空整个路径容器\n样式容器\n\t每次调用路径API时，都会在样式容器里做登记\n\t调用save时，将样式容器里的状态压入样式栈\n\t调用restore时，将样式栈的栈顶状态弹出到样式容器里，进行覆盖\n样式栈\n\t调用save时，将样式容器里的状态压入样式栈\n\t调用restore时，将样式栈的栈顶状态弹出到样式容器里，进行覆盖\n\n\n阻止事件默认行为：break ， container ， return\n")])])]),a("h2",{attrs:{id:"绘制圆形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制圆形"}},[t._v("#")]),t._v(" 绘制圆形")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("arc(x, y, radius, startAngle, endAngle, anticlockwise)\n\t* 画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockWise给定的方向（默认为顺时针）来生成。\n\t\ttrue:逆时针\n\t\tfalse:顺时针\n\t* x,y为绘制圆弧所在圆上的圆心坐标\n\t* radius为半径\n\t* startAngle以及endAngle参数用弧度定义了开始以及结束的弧度，这些都是以x轴为基准\n\t* 参数anticlockWise为一个布尔值。为true时，是逆时针方向，否则为顺时针方向\n\narcTo(x1,y1,x2,y2,radius)\n\t* 根据给定的控制点和半径画一段圆弧\n\t* 肯定会从（x1,y1）但不一定经过（x2,y2）;(x2,y2)只是控制一个方向\n")])])]),a("h2",{attrs:{id:"绘制曲线-贝塞尔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制曲线-贝塞尔"}},[t._v("#")]),t._v(" 绘制曲线（贝塞尔）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("二次贝塞尔\n\tquadraticCurveTo(cplx,cply,x,y)\n\t* 注意：cp1x，cp1y为一个控制点，x,y为结束点，起始点为moveTo时指定的点\n三次贝塞尔\n\tbezierCurveTo(cp1x,cp1y,cp2x,cp2y.x.y)\n\t* 注意：cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点，起始点为moveTo时指定的点\n")])])]),a("h2",{attrs:{id:"canvas中的变换-在canvas中多写是累加的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#canvas中的变换-在canvas中多写是累加的"}},[t._v("#")]),t._v(" canvas中的变换（在canvas中多写是累加的）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("translate(X,Y)：原点\n\t* 用来移动canvas的原点到一个不同的位置\n\t* translate方法接受两个参数，x是左右偏移量，y是上下偏移量\nrotate（angle）：旋转\n\t* 只接受一个参数：旋转的角度，顺时针方向，以弧度为单位的值。\n\t* 旋转的中心点始终是canvas的原点，如果想改变原点，我们需要用到translate方法\nscale（x,y）：缩放\n\t* 接受两个参数，x，y分别是横轴和纵轴的缩放因子，它们都必须是正值\n\t* 值比1.0小表示缩小，比1.0大表示放大，值1.0表示不变\n\t* 缩放一般我们用它来增减图形在canvas中的像素数目，对形状，位图进行缩小或者放大。\n\tcss像素是一个抽象单位\n\t\t放大：使画布内css像素的个数变少，单个css像素所占据的实际物理尺寸变多\n\t\t缩小：使画布内css像素的个数变多，单个css像素所占据的实际物理尺寸变少\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);