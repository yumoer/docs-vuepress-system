(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{289:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("在 JavaScript 代码中，能够表示并操作值的类型称之为"),a("strong",[t._v("数据类型")]),t._v("。")]),t._v(" "),a("p",[t._v("数据类型可分为可变类型和不可变类型。可变类型的值是可修改的，对象和数据就属于可变类型；不可变类型的值是不可修改的，数字、布尔值、null 和 undefined 都属于不可变类型。")]),t._v(" "),a("p",[t._v("字符串可以看成由字符组成的数组，可能被误认为是可变的。但在 JavaScript 中，字符串的值是不可变的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"03.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型"}},[t._v("#")]),t._v(" 原始类型")]),t._v(" "),a("p",[t._v("原始类型，又称为原始值，是直接代表 JavaScript 语言实现的最底层的数据。")]),t._v(" "),a("p",[t._v("原始类型分别为 boolean 类型、number 类型和 string 类型三种。当然，有些资料将undefined 和 null 也归为原始类型（这里表示为特殊类型）。")]),t._v(" "),a("p",[t._v("声明变量并初始化值为原始类型，一般称之为字面量方式定义变量，也可以称之为直接量方式定义变量。")]),t._v(" "),a("h2",{attrs:{id:"boolean-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型"}},[t._v("#")]),t._v(" boolean 类型")]),t._v(" "),a("p",[t._v("布尔（boolean）类型是指真或假、开或关、是或否。这个类型只有两个值：true 和 false。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")])]),t._v(" "),a("ul",[a("li",[t._v("由于 JavaScript 是区分大小写的，布尔类型的 true 和 false 全部是小写。")]),t._v(" "),a("li",[t._v("JavaScript 也可以将其他类型的数据，自动转换为布尔类型。")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据类型")]),t._v(" "),a("th",[t._v("转换为 true 的值")]),t._v(" "),a("th",[t._v("转换为 false 的值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("boolean类型")]),t._v(" "),a("td",[t._v("true")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("string类型")]),t._v(" "),a("td",[t._v("任何非空字符串")]),t._v(" "),a("td",[t._v("“”（空字符串）")])]),t._v(" "),a("tr",[a("td",[t._v("number类型")]),t._v(" "),a("td",[t._v("任何非零数字值（包括无穷大）")]),t._v(" "),a("td",[t._v("0和NaN")])]),t._v(" "),a("tr",[a("td",[t._v("object类型")]),t._v(" "),a("td",[t._v("任何对象")]),t._v(" "),a("td",[t._v("null")])]),t._v(" "),a("tr",[a("td",[t._v("undefined")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("undefined")])])])]),t._v(" "),a("h2",{attrs:{id:"number-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型"}},[t._v("#")]),t._v(" number 类型")]),t._v(" "),a("p",[t._v("number 类型是指数字，JavaScript 不区分整数类型和浮点类型。")]),t._v(" "),a("ul",[a("li",[t._v("整数类型: 包括负整数、0和正整数等。")]),t._v(" "),a("li",[t._v("浮点类型: 表示小数，JavaScript 中的所有数字均用浮点类型表示。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 八进制或十六进制的数值最终会被转换成十进制数值。")])]),t._v(" "),a("h2",{attrs:{id:"浮点类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点类型"}},[t._v("#")]),t._v(" 浮点类型")]),t._v(" "),a("p",[t._v("浮点类型，就是指该数值包含整数部分、小数点和小数部分。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" floatNum1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" floatNum2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有效，但不推荐")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")])]),t._v(" "),a("ul",[a("li",[t._v("JavaScript允许小数点前可以没有整数，但不推荐这种写法。")]),t._v(" "),a("li",[t._v("保存浮点类型需要的空间是保存整数类型的两倍。")]),t._v(" "),a("li",[t._v("如果小数点后面没有任何数字，那这个数值作为整数类型保存。")])])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" floatNum3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 小数点后面没有数字 —— 解析为 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" floatNum4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 整数 —— 解析为 10")]),t._v("\n")])])]),a("h3",{attrs:{id:"四舍五入误差"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四舍五入误差"}},[t._v("#")]),t._v(" 四舍五入误差")]),t._v(" "),a("p",[t._v("整数有无数个，但JavaScript通过浮点类型只能表示有限的个数（确切地说是 18 437 736 874 454 810 627个）。也就是说，当在JavaScript中使用浮点类型时，常常只是真实值的一个近似表示。如下述代码:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值为false，表示两值不相等")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值为false，.3-.2 不等于 .1")]),t._v("\ny "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 值为true，.2-.1 等于 .1")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 建议使用大整数表示金额。例如使用分作为单位，而不是使用元作为单位。")])]),t._v(" "),a("h3",{attrs:{id:"nan"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nan"}},[t._v("#")]),t._v(" NaN")]),t._v(" "),a("p",[t._v("NaN（Not a Number），即非数值，是一个特殊的数值。")]),t._v(" "),a("p",[t._v("特点:")]),t._v(" "),a("ul",[a("li",[t._v("任何涉及NaN的操作都会返回NaN。")]),t._v(" "),a("li",[t._v("NaN与任何值都不相等，包括NaN本身。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 针对上述特点，JavaScript提供了isNaN( )函数。该函数用于判断计算结果是否为数值。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false（10是一个数值）")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"10"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false（可以被转换成数值 10）")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"blue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出true（不能转换成数值）")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出false（可以被转换成数值 1）")]),t._v("\n")])])]),a("h2",{attrs:{id:"string-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-类型"}},[t._v("#")]),t._v(" string 类型")]),t._v(" "),a("p",[t._v("string 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列，被称之为字符串。字符串可以由双引号（\"）或单引号（'）表示。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" firstString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Nicholas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" secondString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Zakas'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("string类型包含一些特殊的转义字符，用于表示非打印字符。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("转义字符")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("\\n")]),t._v(" "),a("td",[t._v("换行符")])]),t._v(" "),a("tr",[a("td",[t._v("\\t")]),t._v(" "),a("td",[t._v("制表符")])]),t._v(" "),a("tr",[a("td",[t._v("\\b")]),t._v(" "),a("td",[t._v("退格符")])]),t._v(" "),a("tr",[a("td",[t._v("\\r")]),t._v(" "),a("td",[t._v("回车符")])]),t._v(" "),a("tr",[a("td",[t._v("\\f")]),t._v(" "),a("td",[t._v("换页符")])]),t._v(" "),a("tr",[a("td",[t._v("\\")]),t._v(" "),a("td",[t._v("斜杠")])]),t._v(" "),a("tr",[a("td",[t._v("'")]),t._v(" "),a("td",[t._v("单引号（'），在用单引号表示的字符串中使用。")])]),t._v(" "),a("tr",[a("td",[t._v('"')]),t._v(" "),a("td",[t._v('双引号（"），在用双引号表示的字符串中使用。')])])])]),t._v(" "),a("h2",{attrs:{id:"typeof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof-运算符"}},[t._v("#")]),t._v(" typeof 运算符")]),t._v(" "),a("p",[t._v("由于 JavaScript 是弱类型/松散类型的，因此需要有一种手段来检测给定变量的数据类型。typeof 运算符就是负责提供这方面信息，如下述代码:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 string")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" typeof 运算符加上圆括号，会像是函数，而不是运算符，并不建议这种写法。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("值")]),t._v(" "),a("th",[t._v("类型")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("true或false")]),t._v(" "),a("td",[t._v("boolean")])]),t._v(" "),a("tr",[a("td",[t._v("任意数字或NaN")]),t._v(" "),a("td",[t._v("number")])]),t._v(" "),a("tr",[a("td",[t._v("任意字符串")]),t._v(" "),a("td",[t._v("string")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("object")])])])]),t._v(" "),a("h2",{attrs:{id:"包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包装类型"}},[t._v("#")]),t._v(" 包装类型")]),t._v(" "),a("h3",{attrs:{id:"包装类型概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包装类型概述"}},[t._v("#")]),t._v(" 包装类型概述")]),t._v(" "),a("p",[t._v("在 JavaScript 中，对应原始类型提供了包装类型。通过包装类型可以创建原始类型的对象（后面的课程学习）。")]),t._v(" "),a("p",[t._v("由于 JavaScript 是区分大小写的，从写法上来说，原始类型是全部小写，包装类型则是全部大写。")]),t._v(" "),a("p",[t._v("一般不建议使用包装类型定义对应的数据类型，但包装类型提供了操作相应值的方法。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 包装类型涉及到对象的概念，具体技术内容会在后面的课程学习。")])]),t._v(" "),a("h3",{attrs:{id:"boolean-类型-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean-类型-2"}},[t._v("#")]),t._v(" Boolean 类型")]),t._v(" "),a("p",[t._v("Boolean 类型是原始类型 boolean 类型对应的包装类型。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bool "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("boolean 类型与 Bollean 类型的区别:")]),t._v(" "),a("ul",[a("li",[t._v('typeof 运算符对原始类型返回 "boolean"，而对包装类型为 "object"。')]),t._v(" "),a("li",[t._v("instanceof 运算符测试 Boolean 类型返回 true，而测试 boolean 类型返回 false。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 不建议使用 Boolean 类型。")])]),t._v(" "),a("h3",{attrs:{id:"number-类型-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number-类型-2"}},[t._v("#")]),t._v(" Number 类型")]),t._v(" "),a("p",[t._v("Number 类型是原始类型 number 类型对应的包装类型。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("number 类型与 Number 类型的区别:")]),t._v(" "),a("ul",[a("li",[t._v('typeof 运算符对原始类型返回 "number"，而对包装类型为 "object"。')]),t._v(" "),a("li",[t._v("instanceof 运算符测试 Number 类型返回 true，而测试 number 类型返回 false。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 不建议使用 Number 类型。")])]),t._v(" "),a("h3",{attrs:{id:"string-类型-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-类型-2"}},[t._v("#")]),t._v(" String 类型")]),t._v(" "),a("p",[t._v("String 类型是原始类型 string 类型对应的包装类型。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("string 类型与 String 类型的区别:")]),t._v(" "),a("ul",[a("li",[t._v('typeof 运算符对原始类型返回 "string"，而对包装类型为 "object"。')]),t._v(" "),a("li",[t._v("instanceof 运算符测试 String 类型返回 true，而测试 string 类型返回 false。")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 不建议使用 String 类型。")])]),t._v(" "),a("h3",{attrs:{id:"instanceof-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-运算符"}},[t._v("#")]),t._v(" instanceof 运算符")]),t._v(" "),a("p",[t._v("instanceof 运算符的左操作数是一个包装类型的变量，右操作数是对应的数据类型。如果左侧的变量是右侧的数据类型，则表达式返回 true；否则返回 false。例如下述代码:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"this is message"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算结果为 true, str是String类型")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算结果为 true, 所有包装类型都是Object的实例")]),t._v("\nstr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算结果为 false")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(' 所有对象都是 Object 类型的实例对象，通过 instanceof 运算符判断一个对象是否为具体数据类型，也包含"父类"。（后面课程会学习）')])]),t._v(" "),a("h2",{attrs:{id:"特殊类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊类型"}},[t._v("#")]),t._v(" 特殊类型")]),t._v(" "),a("h3",{attrs:{id:"undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[t._v("#")]),t._v(" undefined")]),t._v(" "),a("p",[t._v("JavaScript 中有两个表示空的数据类型，undefined 和 null，其中比较有用的是 undefined。undefined 类型只有一个值，就是 undefined。")]),t._v(" "),a("p",[t._v("下列情况会返回undefined:")]),t._v(" "),a("ul",[a("li",[t._v("访问未修改的变量 undefined")]),t._v(" "),a("li",[t._v("没有定义 return 表达式的函数隐式返回 undefined")]),t._v(" "),a("li",[t._v("return 表达式没有显式的返回任何内容")]),t._v(" "),a("li",[t._v("访问不存在的属性")]),t._v(" "),a("li",[t._v("任何被设置为 undefined 值的变量")])]),t._v(" "),a("h3",{attrs:{id:"null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" null")]),t._v(" "),a("p",[t._v("null 类型是 JavaScript 中的一个特殊类型，用于表示一个不再指向任何内存空间地址的变量。")]),t._v(" "),a("p",[t._v("null 值多用于释放 JavaScript 中的资源（变量、数组和函数等）。")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 使用 typeof 运算符计算 null 的话，返回的是 object。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" atguigu "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("atguigu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 null")]),t._v("\n")])])]),a("h3",{attrs:{id:"undefined-与-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-与-null"}},[t._v("#")]),t._v(" undefined 与 null")]),t._v(" "),a("ul",[a("li",[t._v("共同点: 都是原始类型，保存在栈中。")]),t._v(" "),a("li",[t._v("不同点\n"),a("ul",[a("li",[t._v("undefined: 表示变量声明但未被赋值，是所有未赋值变量的默认值。一般很少主动使用。")]),t._v(" "),a("li",[t._v("null: 表示一个没有指向任何内存地址的变量，将来可能指向某个具体内存地址。一般用于主动释放资源。")])])])]),t._v(" "),a("h2",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),a("h3",{attrs:{id:"隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[t._v("#")]),t._v(" 隐式类型转换")]),t._v(" "),a("p",[t._v("由于 JavaScript 是弱类型/松散类型的，在任何情况下都可以强制转换。")]),t._v(" "),a("ul",[a("li",[t._v("转换为字符串: 将一个值加上空字符串可以轻松转换为字符串类型。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("转换为数字: 使用一元的加号操作符，可以把字符串转换为数字。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("转换为布尔值: 使用否操作符两次，可以把一个值转换为布尔型。")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"显式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显式类型转换"}},[t._v("#")]),t._v(" 显式类型转换")]),t._v(" "),a("ul",[a("li",[t._v("使用 JavaScript 的包装类型的构造函数进行类型转换。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("构造函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Number()")]),t._v(" "),a("td",[t._v("将字符串或布尔值转换为数字，如果包含非法字符，则返回NaN。")])]),t._v(" "),a("tr",[a("td",[t._v("String()")]),t._v(" "),a("td",[t._v("将数字或布尔值转换为字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("Boolean()")]),t._v(" "),a("td",[t._v("将字符串或数字转换为布尔值。")])])])]),t._v(" "),a("ul",[a("li",[t._v("使用数据类型的转换函数进行类型转换。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("构造函数")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("toString()")]),t._v(" "),a("td",[t._v("将数字或布尔值转换为字符串。")])]),t._v(" "),a("tr",[a("td",[t._v("parseInt()")]),t._v(" "),a("td",[t._v("将字符串或布尔值转换为整数类型。")])]),t._v(" "),a("tr",[a("td",[t._v("parseFloat()")]),t._v(" "),a("td",[t._v("将字符串或布尔值转换为浮点类型。")])])])])])}),[],!1,null,null,null);a.default=r.exports}}]);