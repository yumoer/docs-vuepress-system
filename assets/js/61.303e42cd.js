(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{283:function(t,a,n){"use strict";n.r(a);var e=n(2),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"使用图片"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用图片"}},[t._v("#")]),t._v(" 使用图片")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('插入图片\n\t* canvas操作图片时，必须要等图片加载完才能操作\n\t* drawImage(image,x,y,width,height)\n\t\t* 其中image是image或者canvas对象，x和y是其在目标canvas里的其实坐标\n\t\t* 这两个方法多了两个参数：width和height，这两个参数用来控制canvas画入时应该缩放的大小\n使用背景\n\tcreatePattren(image,"repetition")\n\t\t* image:图像源\n\t\t* repetition:repeat/repeat-x/repeat-y/no-repeat\n\t\t* 会将createPatern返回的对象作为FILLStyle的值\n')])])]),a("h3",{attrs:{id:"渐变"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渐变"}},[t._v("#")]),t._v(" 渐变")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("线性渐变\n\tcreateLinearGradient(x1,y1,x2,y2)\n\t\t* 表示渐变的起点（x1,y1）与终点（x2,y2）\n\n\t\t* gradient.addColorStop（position，color）\n\t\t\t* gradient:createLinearGradient的返回值\n\t\t\t* addColorStop()方法只接受2个参数\n\t\t\t\t* position参数必须是一个0.0-1.0之间的数值，表示渐变中颜色所在的相对位置\n\t\t\t\t* color参数必须是一个有效的CSS颜色值\n径向渐变\n\tcreateRadialGradient(x1,y1,r1,x2,y2,r2)\n\t\t* 前三个参数则定义另一个以(x1,y1)为原点，半径为r1的圆\n\t\t* 后三个参数则定义另一个以(x2,y2)为原点，半径为r2的圆\n\n\t\t* gradient.addColorStop（position，color）\n\t\t\t* gradient:createLinearGradient的返回值\n\t\t\t* addColorStop()方法只接受2个参数\n\t\t\t\t* position参数必须是一个0.0-1.0之间的数值，表示渐变中颜色所在的相对位置\n\t\t\t\t* color参数必须是一个有效的CSS颜色值\n")])])]),a("h4",{attrs:{id:"飞鸟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#飞鸟"}},[t._v("#")]),t._v(" 飞鸟")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("canvas.width = document.documentElement,clientWidth -  视口宽度\ncanvas.height = document.documentElement,clientHeight - 视口高度\n")])])]),a("h2",{attrs:{id:"绘制文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#绘制文本"}},[t._v("#")]),t._v(" 绘制文本")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("canvas提供了两种方法来渲染文本：\n\t* fillText（text,x,y）\n\t\t在指定的（x,y）位置填充指定的文本\n\t* strokeText(text,x,y)\n\t\t在指定的(x,y)位置绘制文本内容\n文本样式\n\tfont = value - 绘制文本的样式\n\t\t* 默认的字体是10px sans-serif\n\t\t* font属性在指定时，必须要有大小和字体\n\ttextAlign = value - 文本对齐选项\n\t\tleft - 文本左对齐\n\t\tcenter - 文本右对齐\n\t\t\t* 文本的居中是基于你在fillText时所给的x值\n\t\t\t* 文本一半在x的左边，一半在x的右边\n\t\tright - 文本居中对齐\n\ttextBaseline = value - 当前文本基线的属性\n\t\ttop - 文本基线在文本块的顶部\n\t\tmiddle - 文本基线在文本块的中间\n\t\tbottom - 文本基线在文本块的底部\n\tmeasureText() - 方法返回一个TextMetrics对象，包含文本尺寸信息\n文本水平垂直居中\n\t\n阴影\n\tshadowOffsetx = float\n\t\t* 用来设定阴影在x轴的延伸距离\n\t\t* 默认为0\n\tshadowOffsety = float\n\t\t* 用来设定阴影在y轴的延伸距离\n\t\t* 默认为0\n\tshadowBlur = float\n\t\t* 用于设定阴影的模糊程度，默认为0\n\tshadowcolor = color（必需项）\n\t\t* 用于设定阴影颜色效果，默认是全透明的黑色\n")])])]),a("h2",{attrs:{id:"像素操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#像素操作"}},[t._v("#")]),t._v(" 像素操作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("一个对象，三个方法\nimageData对象\n\tImageData对象中存储着canvas对象真实的像素数据，它包含以下几个只读属性：\n\t\twidth - 横向上像素点的个数（图片宽度）\n\t\theight - 纵向上像素点的个数（图片高度）\n\t\tdata() - UintClampedArray类型的一推数组\n\t\t\t包含着rgba格式的整体数据，范围在0至255之间\n\t\t\tr:0 --\x3e 255 (黑色到白色)\n\t\t\tg:0 --\x3e 255 (黑色到白色)\n\t\t\tb:0 --\x3e 255 (黑色到白色)\n\t\t\ta:0 --\x3e 255 (透明到不透明)\ngetImageData() - 得到场景像素数据\n\t* 获得一个包含画布场景像素数据的ImageData对象，代表画布区域的对象数据\n\t\tctx.getImageData(sx,sy,sw,sh)\n\t\t\tsx:将要被提取的图像数据矩形区域的左上角X坐标\n\t\t\tsy:将要被提取的图像数据矩形区域的左上角y坐标\n\t\t\tsw:将要被提取的图像数据矩形区域的宽度\n\t\t\tsh:将要被提取的图像数据矩形区域的高度\ncreateImageData() - 创建一个ImageData对象\n\tctx.createImageData(width,height);\n\t\twidth: ImageData 新对象的宽度\n\t\theight: ImageData 新对象的高度\n\t\t\t默认创建出来的是透明的rgba（0，0，0，0）\nputImageDate() - 在场景中写入像素数据\n\t* putImageData()方法去对场景进行像素数据的写入\n\tctx.putImageDate(myImageData,dx,dy)\n\t\tdx和dy参数表示你希望在场景内左上角绘制的像素数据所得到的设备坐标 \n")])])]),a("h2",{attrs:{id:"合成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成"}},[t._v("#")]),t._v(" 合成")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("全局透明度的设置\n\tglobalAlpha = value\n\t\t这个属性影响到canvas里所有图形的透明度\n\t\t默认值为1.0，有效范围0.0（完全透明）到1.0（完全不透明）\n覆盖合成\n\tsource:新的图像（源）\n\tdestination:已经绘制过的图形（目标）\nglobalCompositeOperation\n\t* source-over(默认):源在上面，新的图像层级比较高\n\t* sourcr-in:只留下源与目标的重叠部分（源的一部分）\n\t* source-out:只留下源超过目标的部分\n\t* source-atop:砍掉源溢出的部分\n\t\n\t* destination-over:目标在上面，旧的图像层级比较高\n\t* destination-in:只留下源与目标的重叠部分（目标的那部分）\n\t* destination-out:只留下目标超过源的部分\n\t* destination-atop: 砍掉目标溢出的部分\n")])])]),a("h3",{attrs:{id:"将画布导出为图像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将画布导出为图像"}},[t._v("#")]),t._v(" 将画布导出为图像")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("toDataURL(注意是canvas元素接口上的方法)\n")])])]),a("h3",{attrs:{id:"事件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件操作"}},[t._v("#")]),t._v(" 事件操作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("ctx.isPointInpath(x,y)\n\t判断在当前路径中是否包含检测点\n\t\tx:检测点的X坐标\n\t\ty:检测点的y坐标\n\t注意：此方法只作用于最新画出的canvas图像\t\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);