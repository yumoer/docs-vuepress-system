(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{321:function(t,n,a){"use strict";a.r(n);var s=a(2),e=Object(s.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[this._v('###隐式强制类型转换\n数字与\nvar a = 42;\nvar b = a + "";')]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[this._v('隐式强制类型转换为布尔值\n\t(1)  if (..) 语句中的条件判断表达式。\n\t(2)  for ( .. ; .. ; .. ) 语句中的条件判断表达式（第二个）。\n\t(3)  while (..) 和 do..while(..) 循环中的条件判断表达式。\n\t(4)  ? : 中的条件判断表达式。\n\t(5)  逻辑运算符 || （逻辑或）和 && （逻辑与）左边的操作数（作为条件判断表达式）\n\t\n\tvar a = 42;\n\tvar b = "abc";\n\tvar c;\n\tvar d = null;\n\tif (a) {\n\t\tconsole.log( "yep" ); // yep\n\t}\n\twhile (c) {\n\t\tconsole.log( "nope, never runs" );\n\t}\n\tc = d ? a : b;\n\tc; // "abc"\n\tif ((a && d) || c) {\n\t\tconsole.log( "yep" ); // yep\n\t}\n')])])]),t("h3",{attrs:{id:"和"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[this._v("#")]),this._v(" ||  和  &&")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[this._v('var a = 42;\nvar b = "abc";\nvar c = null;\na || b; // 42\na && b; // "abc"\nc || b; // "abc"\nc && b; // null\n\n\n|| 和 && 首先会对 第一个操作数 （ a 和 c ）执行条件判断，\n\t如果其不是布尔值（如上例）就先进行 ToBoolean 强制类型转换，然后再执行条件判断。\n\t对于 || 来说，如果条件判断结果为 true 就返回第一个操作数（ a 和 c ）的值，\n\t\t\t\t如果为 false 就返回第二个操作数（ b ）的值。\n\t对于 && 来说，如果条件判断结果为 true 就返回第二个操作数（ b ）的值，\n\t\t\t\t如果为 false 就返回第一个操作数（ a 和 c ）的值。\n\t\t\t\t\n\t\t\t\t\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果（其中可能涉及强制类型转换）。\n c && b 中 c 为 null ，是一个假值，因此 && 表达式的结果是 null (即 c 的值)，而非条件判断的结果 false 。\n \n\na || b; 大致相当于  a ? a : b;\na && b; 大致相当于 a ? b : a;\n')])])])])}),[],!1,null,null,null);n.default=e.exports}}]);