(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{298:function(t,a,v){"use strict";v.r(a);var n=v(2),s=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"函数与-function-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数与-function-对象"}},[t._v("#")]),t._v(" 函数与 Function 对象")]),t._v(" "),a("p",[t._v("函数是这样的一段 JavaScript 代码，它只定义一次，但可能被执行或调用多次。")]),t._v(" "),a("p",[t._v("Function 类型是 JavaScript 提供的引用类型之一，通过 Function 类型创建 Function 对象。")]),t._v(" "),a("p",[t._v("在 JavaScript 中，函数也是以对象的形式存在的。每个函数都是一个 Function 对象。")]),t._v(" "),a("p",[t._v("函数名，本质就是一个变量名，是指向某个 Function 对象的引用。")]),t._v(" "),a("h2",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[t._v("在 JavaScript 中，函数除了可以通过函数定义语句或字面量表达式两种方式定义之外，还可以通过 Function 类型进行定义:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" add "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"num2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"var sum = num1+num2; return sum;"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[a("strong",[t._v("值得注意的是:")]),t._v(" 通过 Function 类型定义函数的效率远不如通过函数定义语句或字面量表达式两种方式定义。")])]),t._v(" "),a("p",[t._v("目前，定义函数具有三种方式，这三种方式之间存在一定差别:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("定义方式")]),t._v(" "),a("th",[t._v("执行")]),t._v(" "),a("th",[t._v("效率")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("函数定义语句")]),t._v(" "),a("td",[t._v("函数名被声明提前")]),t._v(" "),a("td",[t._v("不存在效率问题")])]),t._v(" "),a("tr",[a("td",[t._v("字面量表达式")]),t._v(" "),a("td",[t._v("函数体固定，无法动态执行")]),t._v(" "),a("td",[t._v("不存在效率问题")])]),t._v(" "),a("tr",[a("td",[t._v("Function 类型定义")]),t._v(" "),a("td",[t._v("函数体是字符串，可以动态执行")]),t._v(" "),a("td",[t._v("效率低")])])])]),t._v(" "),a("h2",{attrs:{id:"函数的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数的属性和方法"}},[t._v("#")]),t._v(" 函数的属性和方法")]),t._v(" "),a("p",[t._v("由于每个函数都是一个 Function 对象，Function 类型也提供了一些属性和方法:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("属性名")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("length")]),t._v(" "),a("td",[t._v("表示函数希望接收的命名参数的个数。")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("方法名")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("call()")]),t._v(" "),a("td",[t._v("在指定的函数内调用另一个函数，参数能够以列表形式传入。")])]),t._v(" "),a("tr",[a("td",[t._v("apply()")]),t._v(" "),a("td",[t._v("在指定的函数内调用另一个函数，参数能够以数组形式传入。")])]),t._v(" "),a("tr",[a("td",[t._v("bind()")]),t._v(" "),a("td",[t._v("用于基于现有函数创建一个新函数对象。同时为新函数对象提前绑定this值或设置参数值。")])])])])])}),[],!1,null,null,null);a.default=s.exports}}]);