(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{250:function(t,n,e){"use strict";e.r(n);var o=e(2),u=Object(o.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("p",[this._v("###值,数据类型,变量(ES5)\na.值:计算机程序的运行需要对值进行操作,在javascript中值被分成了两大类:基本数据类型,引用数据类型\nb.数据类型:数据类型是值的内部特征,它定义了值的行为,以使其区别于其他的值。\n基本数据类型\t\t\t\t(对应的值)\n空\t\t\t\t\tnull\n未定义\t\t\t\tundefined\n布尔类型\t\t\t\ttrue/false\n数字\t\t\t\t\t1,2,3....\n字符串\t\t\t\t\"1\",\"2\",\"3\",'a','b','c'....\n引用数据类型\t\t\t\t(对应的值)\n对象\t\t\t\t\t数组,函数,{}....\n我们可以用 typeof 运算符来查看值的类型\n/"),t("em",[this._v("基本数据类性")]),this._v('/\nconsole.log(typeof undefined \t=== "undefined")// true\nconsole.log(typeof null\t\t\t=== "object")\t// true\nconsole.log(typeof true \t \t=== "boolean")\t// true\nconsole.log(typeof 42 \t\t \t=== "number")\t// true\nconsole.log(typeof "42" \t \t=== "string")\t// true')]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[this._v('\t\t\t/*引用数据类型*/\n\t\t\t\tconsole.log(typeof {} \t\t\t=== "object")\t// true\n\t\t\t\tconsole.log(typeof []\t\t\t=== "object")\t// true\n\t\t\t\tconsole.log(typeof function(){} === "function") // true  函数是javascript中的一等公民\n\t\t\t以上两种类型均有同名的字符串值与之对应,你可能注意到 null 类型不在此列。它比较 特殊 ， typeof 对它的处理有问题：\n\t\t\t\t1.typeof null === "object"; // true\n\t\t\t\t\t正确的返回结果应该是 "null" ，但这个 bug  由来已久，在 javascript  中已经存在了将近二十年，\n\t\t\t\t\t也许永远也不会修复，因为这牵涉到太多的 Web  系统，修复 它会 产生 更多的 bug ，令许多系统无法正常工作\n\t\t\t\t\t\n\t\t\t\t2.typeof function a(){ /* .. */ } === "function"; // true\n\t\t\t\t\tfunction是 object 的一个 子类型 。具体来说，函数是 可调用对象 \n\t\t\t\t\t函数是javascript中的一等公民\n\t\t\t\t\t\n\t\t\t\t3.typeof 安全机制（讲述左右查询时再来理解）\n\t\t\t\t\ttypeof undefined === "undefined"; // true\n\t\t\t\t\ttypeof 未定义的变量    === "undefined"; // true\n\tc.变量;当程序需要将值保存起来以备将来使用时,便将其赋值给一个变量。变量是一个值的符号名称。\n\t\t    可以通过名称来获得对值的引用。\n\td.注意点！\n\t\t----取得并使用值是所有程序设计中的要点。在javascript中变量是没有类型的，只有值才持有类型。！！\n\t\t\t也就是说javascript不做类型强制;语言引擎不要求变量总是持有与其初始值同类型的值。一个变\n\t\t\t量可以现在被赋值为字符串类型值，随后又被赋值为数字类型值。这是javascript作为动态语言的一个优势。\n\t\t----在对变量执行 typeof 操作时，得到的结果并不是该变量的类型，而是该变量持有的值的类型，\n\t\t\t因为 JavaScript 中的变量没有类型。\n\te.值传递&引用传递\n\t\t\tjs中所有的传递都是值传递 没有引用传递\n\n\t\t\t基本数据类型总是通过值复制的方式来赋值/传递\n\t\t\t引用数据类型总是通过引用复制来完成赋值/传递\n\t\t\t注意引用指向的是值而非变量，所以一个引用无法更改另一个引用的指向，\t\n\t\t\t\t\t\t\t但是可以更改不同变量共同指向的值！\n')])])])])}),[],!1,null,null,null);n.default=u.exports}}]);