(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{251:function(t,e,a){"use strict";a.r(e);var n=a(2),s=Object(n.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"浏览器存储-web-stotage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器存储-web-stotage"}},[t._v("#")]),t._v(" 浏览器存储 - web stotage")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("sessionStorage和localStorage都是本地存储，不会被发送到服务器上，同时空间比cookie大很多，一般支持5-10M\n浏览器通过window.sessionStorage和window.localStotage属性来实现本地存储机制\n\nlocalStotage - 本地页和共享页面都存储\n\t1.永久存储（除非清除，才不会存储）\n\t2.本地页setItem值，共享页getItem值\n\t3.在本地页面定义，Storage事件在共享页面触发\n\t4.localStorage\n\t\t在当前页操作，共享页同步操作\nsessionStorage - 只在本地页存储\n\t1.一次存储（绘画级别）\n\t2.本地页setItem值，共享页getItem不输出值\n\t3.sessionStotage\n\t\t因为一次存储，刷新后消失，可以进行判断，使其记录当前值\n\nvar data=Storage.getItem('key');\n\t该方法接受一个键名作为参数，返回键名对应的值\nStorage.setItem('key','value');\n\t该方法接受一个键名和值作为参数，将会把键名对添加到存储中，如果键名存在，则更新其对应的值\nStorage.removeItem('key');\n\t改方法接受一个键名作为参数，并把该键名从存储中删除\nStorage,clear();\n\t调用该方法会清空存储中的所有键名\n\nStorage事件：\n\tStorage对象发生变化时（即创建/更新/删除数据项时，重复设置相同的键值不会触发该事件，Storage.clear()）\n\t在同一个页面内发生的改变不会起作用\n\t在相同域名下的其他页面发生的改变才会起作用（修改的页面不会触发事件，与它共享的页面会触发事件）\n\t\tkey: 修改或删除key值，如果调用clear（），为null\n\t\tnewValue: 新设置的值，如果调用clear(),为null\n\t\toldValue:调用改变前的value值，如果调用clear(),为null\n\t\turl:触发改脚本变化的文档的url\n\t\tstorageArea: 当前Storage对象\n")])])]),e("h3",{attrs:{id:"有关事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有关事件"}},[t._v("#")]),t._v(" 有关事件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("change事件：输入框输入值有改变且失去获焦时触发事件\ninput事件：输入框输入时当元素值更改，同步触发事件\nstorage事件：local是在本地不会触发，在共享页面触发，永久存储\n\t\t\tsession是在本地页面触发，只触发一次\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);